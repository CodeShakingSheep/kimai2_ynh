#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source ynh_add_extra_apt_repos__3
source ynh_install_php__3
source ynh_composer__2
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_print_info --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
database=$(ynh_app_setting_get $app database)
random_key=$(ynh_app_setting_get --app=$app --key=random_key)

#=================================================
# CHECK VERSION
#=================================================
ynh_print_info --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_print_info --message="Ensuring downward compatibility..."

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=0
	is_public=0
fi


# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_print_info --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# UPGRADE PHP7.3
#=================================================

if [ "$(lsb_release --codename --short)" = "buster" ]; then
	pkg_dependencies="$pkg_dependencies $extra_pkg_dependencies"
else
	if [ "$(ynh_app_setting_get --app=$app --key=php_version)" != "7.3" ]; then
		ynh_print_info --message="Upgrading PHP7.3..."
		ynh_remove_fpm_config
		ynh_remove_app_dependencies
		ynh_remove_php
		ynh_install_php --phpversion="7.3" --package="$extra_pkg_dependencies"
	else
		ynh_install_php --phpversion="7.3" --package="$extra_pkg_dependencies"
	fi
fi

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_print_info --message="Upgrading source files..."
	
	# Create a temporary directory and backup config
	tmpdir="$(mktemp -d)"
	if [ -f $final_path/config/packages/local.yaml ]; then
		cp -af "$final_path/config/packages/local.yaml" "$tmpdir/."
	fi
	if [ -d $final_path/var/invoices ]; then
		cp -af "$final_path/var/invoices" "$tmpdir/."
	fi
	if [ -f $final_path/var/data/kimai.sqlite ]; then
		cp -a "$final_path/var/data/kimai.sqlite" "$tmpdir/."
		ynh_app_setting_set $app database "sqlite"
	fi
	
	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
	
	# Restore config
	if [ -f $tmpdir/local.yaml ]; then
		cp -af "$tmpdir/local.yaml" "$final_path/config/packages/."
	fi
	if [ -d $tmpdir/invoices ]; then
		cp -af "$tmpdir/invoices" "$final_path/var/."
	fi
	if [ -f $tmpdir/kimai.sqlite ]; then
	sudo cp -af "$tmpdir/kimai.sqlite" "$final_path/var/data/."
	fi
	
	ynh_secure_remove --file="$tmpdir"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info --message="Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_print_info --message="Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_print_info --message="Upgrading php-fpm configuration..."

# Create a dedicated php-fpm config
ynh_add_fpm_config --phpversion="7.3"

#=================================================
# SPECIFIC UPGRADE
#=================================================
# CONFIGURE KIMAI 2
#=================================================
ynh_print_info --message="Configuring Kimai 2..."

env_conf=$final_path/.env

# Verify the checksum and backup the file if it's different
ynh_backup_if_checksum_is_different "$env_conf"

# Configure environement
if [ "$database" = "mysql" ]; then
	# setup application config
	sudo  cp ../conf/.env.mysql $env_conf
	db_name=$(ynh_sanitize_dbid $app)
	ynh_app_setting_set $app db_name $db_name
	ynh_mysql_setup_db $db_name $db_name
	
	ynh_replace_string "__RANDOM_KEY__"  "$random_key" "$env_conf"
	ynh_replace_string "__DOMAIN__"      "$domain"     "$env_conf"
	ynh_replace_string "__DB_PASSWORD__" "$db_pwd"     "$env_conf"
	ynh_replace_string "__DB_USER__"     "$db_name"    "$env_conf"
	ynh_replace_string "__DB_NAME__"     "$db_name"    "$env_conf"
else
	# setup application config
	sudo  cp ../conf/.env.sqlite $env_conf
	ynh_replace_string "__RANDOM_KEY__"  "$random_key" "$env_conf"
	ynh_replace_string "__DOMAIN__"      "$domain"     "$env_conf"
fi

#=================================================
# UPGRADE KIMAI 2
#=================================================
ynh_print_info --message="Upgrading Kimai 2..."

ynh_install_composer --phpversion="7.3" --workdir="$final_path"
ynh_composer_exec --phpversion="7.3" --workdir="$final_path" --commands="install --no-dev --optimize-autoloader"

pushd "$final_path"
	php7.3 bin/console kimai:update
popd

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================
ynh_print_info --message="Storing the config file checksum..."


# Recalculate and store the config file checksum into the app settings
ynh_store_file_checksum "$env_conf"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_print_info --message="Securing files and directories..."

# Set permissions on app files
chown -R $app: $final_path

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info --message="Upgrading SSOwat configuration..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info --message="Upgrade of $app completed"
